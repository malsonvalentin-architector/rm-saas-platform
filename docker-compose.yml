version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    restart: unless-stopped
    networks:
      - rm_network

  # Redis (для Celery)
  redis:
    image: redis:6-alpine
    restart: unless-stopped
    networks:
      - rm_network

  # Django Application
  web:
    build: .
    command: gunicorn rm.wsgi:application --bind 0.0.0.0:8000 --workers 3
    volumes:
      - ./:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - rm_network

  # Celery Worker (для фоновых задач)
  celery:
    build: .
    command: celery -A rm worker -l info
    volumes:
      - ./:/app
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - web
    restart: unless-stopped
    networks:
      - rm_network

  # Celery Beat (для периодических задач)
  celery-beat:
    build: .
    command: celery -A rm beat -l info
    volumes:
      - ./:/app
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - web
    restart: unless-stopped
    networks:
      - rm_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - rm_network

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  rm_network:
    driver: bridge
