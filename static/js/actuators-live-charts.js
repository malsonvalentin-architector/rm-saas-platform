/**
 * ProMonitor - Live Charts –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Actuators
 * Phase 4.5 - Real-Time Features
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chart instances
let commandsTimelineChart = null;
let activityChart = null;
let devicesPieChart = null;

// –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (10 —Å–µ–∫—É–Ω–¥)
const REFRESH_INTERVAL = 10000;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö live charts
 */
function initLiveCharts() {
    console.log('üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Live Charts...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≥—Ä–∞—Ñ–∏–∫
    initCommandsTimelineChart();
    initActivityChart();
    initDevicesPieChart();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateLiveStats();
    setInterval(updateLiveStats, REFRESH_INTERVAL);
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä "Live"
    startLiveIndicator();
    
    console.log('‚úÖ Live Charts –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

/**
 * –ì—Ä–∞—Ñ–∏–∫ –∫–æ–º–∞–Ω–¥ –∑–∞ 24 —á–∞—Å–∞ (Timeline)
 */
function initCommandsTimelineChart() {
    const ctx = document.getElementById('commandsTimelineChart');
    if (!ctx) {
        console.warn('‚ö†Ô∏è Canvas commandsTimelineChart –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    commandsTimelineChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: '–ö–æ–º–∞–Ω–¥—ã',
                data: [],
                borderColor: '#0078D4',
                backgroundColor: 'rgba(0, 120, 212, 0.1)',
                borderWidth: 2,
                tension: 0.4,
                fill: true,
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: 'üìä –ö–æ–º–∞–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞',
                    font: {
                        size: 16,
                        weight: 'bold'
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            },
            animation: {
                duration: 750,
                easing: 'easeInOutQuart'
            }
        }
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    updateCommandsTimelineChart();
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    setInterval(updateCommandsTimelineChart, REFRESH_INTERVAL);
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ–º–∞–Ω–¥
 */
async function updateCommandsTimelineChart() {
    try {
        const response = await fetch('/api/actuators/commands-timeline/');
        const data = await response.json();
        
        if (commandsTimelineChart) {
            commandsTimelineChart.data.labels = data.labels;
            commandsTimelineChart.data.datasets[0].data = data.data;
            commandsTimelineChart.update();
            
            console.log('üìà Commands Timeline –æ–±–Ω–æ–≤–ª—ë–Ω:', data.data.length, '—Ç–æ—á–µ–∫');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Commands Timeline:', error);
    }
}

/**
 * –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å (5-–º–∏–Ω—É—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã)
 */
function initActivityChart() {
    const ctx = document.getElementById('activityChart');
    if (!ctx) {
        console.warn('‚ö†Ô∏è Canvas activityChart –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    activityChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: [],
            datasets: [{
                label: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                data: [],
                backgroundColor: '#FF8C42',
                borderColor: '#D9711A',
                borderWidth: 1,
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: '‚ö° –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å',
                    font: {
                        size: 16,
                        weight: 'bold'
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            },
            animation: {
                duration: 750,
                easing: 'easeInOutQuart'
            }
        }
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    updateActivityChart();
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    setInterval(updateActivityChart, REFRESH_INTERVAL);
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
async function updateActivityChart() {
    try {
        const response = await fetch('/api/actuators/activity-chart/');
        const data = await response.json();
        
        if (activityChart) {
            activityChart.data.labels = data.labels;
            activityChart.data.datasets[0].data = data.data;
            activityChart.update();
            
            console.log('üìä Activity Chart –æ–±–Ω–æ–≤–ª—ë–Ω:', data.data.length, '—Ç–æ—á–µ–∫');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Activity Chart:', error);
    }
}

/**
 * Pie Chart - —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —Ç–∏–ø–∞–º
 */
function initDevicesPieChart() {
    const ctx = document.getElementById('devicesPieChart');
    if (!ctx) {
        console.warn('‚ö†Ô∏è Canvas devicesPieChart –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    devicesPieChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: [],
            datasets: [{
                data: [],
                backgroundColor: [
                    '#0078D4',
                    '#FF8C42',
                    '#2ECC71',
                    '#E74C3C',
                    '#9B59B6',
                    '#F39C12',
                    '#1ABC9C',
                    '#E67E22',
                    '#3498DB'
                ],
                borderWidth: 2,
                borderColor: '#fff'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'right',
                    labels: {
                        font: {
                            size: 12
                        },
                        padding: 10
                    }
                },
                title: {
                    display: true,
                    text: 'üéØ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —Ç–∏–ø–∞–º',
                    font: {
                        size: 16,
                        weight: 'bold'
                    }
                }
            },
            animation: {
                animateRotate: true,
                animateScale: true,
                duration: 750
            }
        }
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    updateDevicesPieChart();
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (—ç—Ç–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –º–µ–Ω—è–µ—Ç—Å—è)
    setInterval(updateDevicesPieChart, 30000);
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Pie Chart
 */
async function updateDevicesPieChart() {
    try {
        const response = await fetch('/api/actuators/by-type/');
        const data = await response.json();
        
        if (devicesPieChart) {
            devicesPieChart.data.labels = data.labels;
            devicesPieChart.data.datasets[0].data = data.data;
            devicesPieChart.update();
            
            console.log('ü•ß Pie Chart –æ–±–Ω–æ–≤–ª—ë–Ω:', data.labels.length, '—Ç–∏–ø–æ–≤');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Pie Chart:', error);
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ live —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
 */
async function updateLiveStats() {
    try {
        const response = await fetch('/api/actuators/live-stats/');
        const data = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        updateStatCard('total-devices', data.stats.total);
        updateStatCard('online-devices', data.stats.online);
        updateStatCard('active-devices', data.stats.active);
        updateStatCard('commands-24h', data.stats.commands_24h);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
        updateRecentCommands(data.recent_commands);
        
        console.log('üìä Live Stats –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Live Stats:', error);
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
 */
function updateStatCard(cardId, newValue) {
    const element = document.getElementById(cardId);
    if (!element) return;
    
    const currentValue = parseInt(element.textContent) || 0;
    
    if (currentValue !== newValue) {
        // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        element.style.transform = 'scale(1.1)';
        element.style.transition = 'transform 0.3s ease';
        
        setTimeout(() => {
            element.textContent = newValue;
            element.style.transform = 'scale(1)';
        }, 150);
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
 */
function updateRecentCommands(commands) {
    const container = document.getElementById('recent-commands-list');
    if (!container) return;
    
    container.innerHTML = '';
    
    commands.forEach(cmd => {
        const statusIcon = cmd.success ? '‚úÖ' : '‚ùå';
        const timeAgo = getTimeAgo(new Date(cmd.timestamp));
        
        const item = document.createElement('div');
        item.className = 'list-group-item';
        item.innerHTML = `
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <strong>${cmd.actuator_name}</strong>
                    <br>
                    <small class="text-muted">${cmd.object_name}</small>
                </div>
                <div class="text-end">
                    <span class="badge bg-primary">${cmd.value}</span>
                    <span>${statusIcon}</span>
                    <br>
                    <small class="text-muted">${timeAgo}</small>
                </div>
            </div>
        `;
        container.appendChild(item);
    });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ "X –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
 */
function getTimeAgo(date) {
    const seconds = Math.floor((new Date() - date) / 1000);
    
    if (seconds < 60) return `${seconds} —Å–µ–∫ –Ω–∞–∑–∞–¥`;
    const minutes = Math.floor(seconds / 60);
    if (minutes < 60) return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    const hours = Math.floor(minutes / 60);
    return `${hours} —á –Ω–∞–∑–∞–¥`;
}

/**
 * –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä "Live" —Å –º–∏–≥–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
 */
function startLiveIndicator() {
    const indicator = document.getElementById('live-indicator');
    if (!indicator) return;
    
    setInterval(() => {
        indicator.classList.toggle('pulse');
    }, 1000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initLiveCharts);
} else {
    initLiveCharts();
}
