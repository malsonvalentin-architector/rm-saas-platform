╔════════════════════════════════════════════════════════════════════════╗
║              КОМАНДЫ ДЛЯ RAILWAY SHELL (ПОСЛЕ ДЕПЛОЯ)                  ║
╚════════════════════════════════════════════════════════════════════════╝

📍 ОТКРОЙТЕ: Railway Dashboard → Deployments → Latest → Shell (вкладка справа)

═══════════════════════════════════════════════════════════════════════════
ШАГ 1: ПРОВЕРКА ДЕПЛОЯ
═══════════════════════════════════════════════════════════════════════════

# Проверить версию приложения
cat PHASE_44_DEPLOY_TRIGGER.txt

# Ожидаемый результат: должен показать Phase 4.4 MVP


═══════════════════════════════════════════════════════════════════════════
ШАГ 2: МИГРАЦИЯ БД
═══════════════════════════════════════════════════════════════════════════

# Посмотреть список миграций
python manage.py showmigrations data

# Применить миграции
python manage.py migrate

# Ожидаемый результат:
# Running migrations:
#   Applying data.0012_phase_44_actuators... OK


═══════════════════════════════════════════════════════════════════════════
ШАГ 3: ПРОВЕРКА МОДЕЛЕЙ
═══════════════════════════════════════════════════════════════════════════

# Проверить что модели созданы
python manage.py shell << 'EOF'
from data.models import Actuator, ActuatorCommand
print(f"✅ Actuator: {Actuator._meta.db_table}")
print(f"✅ ActuatorCommand: {ActuatorCommand._meta.db_table}")
print(f"✅ Actuator count: {Actuator.objects.count()}")
exit()
EOF


═══════════════════════════════════════════════════════════════════════════
ШАГ 4: СОЗДАНИЕ ДЕМО ДАННЫХ
═══════════════════════════════════════════════════════════════════════════

# Создать 10 устройств + историю команд
python manage.py create_demo_actuators

# Ожидаемый результат:
# ✅ Создано актуаторов: 10
# ✅ Создано команд: 50-150


═══════════════════════════════════════════════════════════════════════════
ШАГ 5: ПРОВЕРКА СОЗДАННЫХ ДАННЫХ
═══════════════════════════════════════════════════════════════════════════

python manage.py shell << 'EOF'
from data.models import Actuator, ActuatorCommand

actuators = Actuator.objects.count()
online = Actuator.objects.filter(is_online=True).count()
commands = ActuatorCommand.objects.count()
success = ActuatorCommand.objects.filter(status='success').count()

print(f"\n📊 СТАТИСТИКА:")
print(f"  Всего актуаторов: {actuators}")
print(f"  В сети: {online}")
print(f"  Всего команд: {commands}")
print(f"  Успешных: {success}")
if commands > 0:
    print(f"  Успешность: {success/commands*100:.1f}%")
exit()
EOF


═══════════════════════════════════════════════════════════════════════════
ШАГ 6: ПРОВЕРКА URL ROUTING
═══════════════════════════════════════════════════════════════════════════

python manage.py shell << 'EOF'
from django.urls import reverse
try:
    url = reverse('data:actuators_list')
    print(f"✅ Actuators URL работает: {url}")
except Exception as e:
    print(f"❌ Ошибка: {e}")
exit()
EOF


═══════════════════════════════════════════════════════════════════════════
ШАГ 7: ПЕРЕЗАПУСК (если нужно)
═══════════════════════════════════════════════════════════════════════════

# Если что-то пошло не так, перезапустите приложение:
# Railway Dashboard → Deployments → Latest → Redeploy


═══════════════════════════════════════════════════════════════════════════
✅ ГОТОВО! ОТКРОЙТЕ В БРАУЗЕРЕ:
═══════════════════════════════════════════════════════════════════════════

https://www.promonitor.kz/actuators/

Должны увидеть:
  ✅ Карточки статистики (4 карточки)
  ✅ Список устройств (10 штук)
  ✅ Фильтры (тип, объект, статус, поиск)
  ✅ Кнопки "🎮 Управление" и "📊 История"


═══════════════════════════════════════════════════════════════════════════
❓ TROUBLESHOOTING
═══════════════════════════════════════════════════════════════════════════

Проблема: Миграция не применяется
Решение: 
  python manage.py migrate data 0012 --fake-initial

Проблема: URL не найден
Решение:
  python manage.py check
  cat data/urls.py | grep actuators

Проблема: Демо данные не создаются
Решение:
  python manage.py shell
  >>> from data.models import Company, System
  >>> print(Company.objects.count(), System.objects.count())
  >>> exit()


═══════════════════════════════════════════════════════════════════════════
⏰ ВРЕМЯ ВЫПОЛНЕНИЯ: ~3-5 минут
═══════════════════════════════════════════════════════════════════════════
