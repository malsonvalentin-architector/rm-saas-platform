#!/usr/bin/env python3
"""
MODBUS –≠–ú–£–õ–Ø–¢–û–† –¥–ª—è ProMonitor.kz
–≠–º—É–ª–∏—Ä—É–µ—Ç CAREL pCO –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ production —Å–∏—Å—Ç–µ–º—ã
"""
import json
import random
import time
from pymodbus.datastore import ModbusSequentialDataBlock, ModbusSlaveContext, ModbusServerContext
from pymodbus.server.sync import StartTcpServer
from pymodbus.device import ModbusDeviceIdentification

class CarelPcoEmulator:
    """
    –≠–º—É–ª—è—Ç–æ—Ä CAREL pCO –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ production snapshot
    """
    
    def __init__(self, snapshot_file):
        print(f"üì¶ –ó–∞–≥—Ä—É–∂–∞—é snapshot: {snapshot_file}")
        with open(snapshot_file, 'r') as f:
            self.snapshot = json.load(f)
        
        device = self.snapshot['discovered_devices'][2]  # CAREL –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        self.device_info = device
        
        # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ production
        self.base_holding = device['modbus']['holding_registers']['sample_values']
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {device['manufacturer']} {device['model']}")
        print(f"   IP: {device['ip']} (—ç–º—É–ª–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ)")
        print(f"   Holding Registers: {self.base_holding}")
    
    def create_datastore(self):
        """
        –°–æ–∑–¥–∞—ë–º Modbus datastore —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        """
        # Holding Registers (40001+) - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é –∫ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        holding_registers = self.base_holding + [0] * 90  # –†–∞—Å—à–∏—Ä—è–µ–º –¥–æ 100 —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
        
        # Input Registers (30001+) - –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ)
        input_registers = [random.randint(0, 1000) for _ in range(100)]
        
        # Coils (00001+) - –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–µ –≤—ã—Ö–æ–¥—ã
        coils = [False] * 100
        
        # Discrete Inputs (10001+) - –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–µ –≤—Ö–æ–¥—ã
        discrete_inputs = [False] * 100
        
        # –°–æ–∑–¥–∞—ë–º datastore
        store = ModbusSlaveContext(
            di=ModbusSequentialDataBlock(0, discrete_inputs),
            co=ModbusSequentialDataBlock(0, coils),
            hr=ModbusSequentialDataBlock(0, holding_registers),
            ir=ModbusSequentialDataBlock(0, input_registers)
        )
        
        context = ModbusServerContext(slaves=store, single=True)
        
        print(f"‚úÖ Datastore —Å–æ–∑–¥–∞–Ω:")
        print(f"   ‚Ä¢ Holding Registers: 100 —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤")
        print(f"   ‚Ä¢ Input Registers: 100 —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤")
        print(f"   ‚Ä¢ Coils: 100 —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤")
        print(f"   ‚Ä¢ Discrete Inputs: 100 —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤")
        
        return context
    
    def create_device_identity(self):
        """
        –°–æ–∑–¥–∞—ë–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        """
        identity = ModbusDeviceIdentification()
        identity.VendorName = self.device_info['manufacturer']
        identity.ProductCode = self.device_info['model']
        identity.VendorUrl = 'http://www.carel.com'
        identity.ProductName = 'CAREL pCO Emulator'
        identity.ModelName = self.device_info['model']
        identity.MajorMinorRevision = self.device_info['firmware_version']
        
        print(f"‚úÖ Device Identity —Å–æ–∑–¥–∞–Ω:")
        print(f"   ‚Ä¢ Vendor: {identity.VendorName}")
        print(f"   ‚Ä¢ Model: {identity.ModelName}")
        print(f"   ‚Ä¢ Firmware: {identity.MajorMinorRevision}")
        
        return identity

def start_emulator(host='0.0.0.0', port=5020, snapshot_file='/home/user/production_snapshot.json'):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Modbus TCP —ç–º—É–ª—è—Ç–æ—Ä
    """
    print("="*60)
    print("üè≠ MODBUS EMULATOR - CAREL pCO Controller")
    print("="*60)
    
    emulator = CarelPcoEmulator(snapshot_file)
    context = emulator.create_datastore()
    identity = emulator.create_device_identity()
    
    print("\n" + "="*60)
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é Modbus TCP —Å–µ—Ä–≤–µ—Ä –Ω–∞ {host}:{port}")
    print("="*60)
    print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: modbus://{host}:{port}")
    print(f"üîß Slave ID: 1")
    print(f"üìä –≠–º—É–ª–∏—Ä—É–µ—Ç: CAREL pCO (192.168.11.101)")
    print("\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
    print("="*60 + "\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    StartTcpServer(
        context, 
        identity=identity,
        address=(host, port),
        allow_reuse_address=True
    )

if __name__ == "__main__":
    start_emulator()
