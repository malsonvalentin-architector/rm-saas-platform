#!/usr/bin/env python3
"""
MODBUS –≠–ú–£–õ–Ø–¢–û–† Enhanced –¥–ª—è ProMonitor.kz
–í–µ—Ä—Å–∏—è –¥–ª—è Railway deployment —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
import json
import random
import os
from pymodbus.datastore import ModbusSequentialDataBlock, ModbusSlaveContext, ModbusServerContext
from pymodbus.server.sync import StartTcpServer
from pymodbus.device import ModbusDeviceIdentification

class EnhancedCarelPcoEmulator:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —ç–º—É–ª—è—Ç–æ—Ä —Å 200+ —Ä–µ–≥–∏—Å—Ç—Ä–∞–º–∏ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    def __init__(self):
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ production (—Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        self.base_holding = [28836, 16830, 22544, 16833, 25428, 16907, 16515, 16906, 61342, 16806]
        
        # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏
        self.temp_zones = 4  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –∑–æ–Ω—ã
        self.humidity_sensors = 3  # –î–∞—Ç—á–∏–∫–∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
        self.pressure_sensors = 2  # –î–∞—Ç—á–∏–∫–∏ –¥–∞–≤–ª–µ–Ω–∏—è
        self.power_meters = 3  # –°—á—ë—Ç—á–∏–∫–∏ –º–æ—â–Ω–æ—Å—Ç–∏
        
        print("‚úÖ Enhanced Emulator initialized")
        print(f"   ‚Ä¢ Temperature zones: {self.temp_zones}")
        print(f"   ‚Ä¢ Humidity sensors: {self.humidity_sensors}")
        print(f"   ‚Ä¢ Pressure sensors: {self.pressure_sensors}")
        print(f"   ‚Ä¢ Power meters: {self.power_meters}")
    
    def create_datastore(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ datastore"""
        
        # === HOLDING REGISTERS (200 —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤) ===
        holding_registers = []
        
        # 0-9: –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ production
        holding_registers.extend(self.base_holding)
        
        # 10-29: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (4 –∑–æ–Ω—ã x 5 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
        # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 18-25¬∞C (x10 –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏)
        for i in range(self.temp_zones):
            holding_registers.append(random.randint(180, 250))  # –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            holding_registers.append(220)  # –£—Å—Ç–∞–≤–∫–∞ (22.0¬∞C)
            holding_registers.append(random.randint(0, 100))  # –í—ã—Ö–æ–¥ %
            holding_registers.append(random.randint(-30, 30))  # –û—Ñ—Ñ—Å–µ—Ç
            holding_registers.append(random.randint(0, 3))  # –°—Ç–∞—Ç—É—Å
        
        # 30-44: –í–ª–∞–∂–Ω–æ—Å—Ç—å (3 –¥–∞—Ç—á–∏–∫–∞ x 5 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
        # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 40-70% RH
        for i in range(self.humidity_sensors):
            holding_registers.append(random.randint(400, 700))  # –¢–µ–∫—É—â–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å
            holding_registers.append(550)  # –£—Å—Ç–∞–≤–∫–∞ (55%)
            holding_registers.append(random.randint(0, 100))  # –í—ã—Ö–æ–¥ %
            holding_registers.append(random.randint(-100, 100))  # –û—Ñ—Ñ—Å–µ—Ç
            holding_registers.append(random.randint(0, 3))  # –°—Ç–∞—Ç—É—Å
        
        # 45-54: –î–∞–≤–ª–µ–Ω–∏–µ (2 –¥–∞—Ç—á–∏–∫–∞ x 5 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
        # HP: 12-18 bar, LP: 3-7 bar
        for i in range(self.pressure_sensors):
            if i == 0:  # HP
                holding_registers.append(random.randint(120, 180))
                holding_registers.append(150)
            else:  # LP
                holding_registers.append(random.randint(30, 70))
                holding_registers.append(50)
            holding_registers.append(random.randint(0, 100))
            holding_registers.append(random.randint(-20, 20))
            holding_registers.append(random.randint(0, 3))
        
        # 55-69: –ú–æ—â–Ω–æ—Å—Ç—å (3 —Å—á—ë—Ç—á–∏–∫–∞ x 5 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
        # –ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä—ã: 300-400W, –í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã: 100-150W
        for i in range(self.power_meters):
            if i < 2:  # –ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä—ã
                holding_registers.append(random.randint(3000, 4000))
            else:  # –í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã
                holding_registers.append(random.randint(1000, 1500))
            holding_registers.append(random.randint(0, 65535))  # kWh low
            holding_registers.append(random.randint(0, 100))  # kWh high
            holding_registers.append(random.randint(0, 500))  # –¢–æ–∫ (x10)
            holding_registers.append(random.randint(0, 3))  # –°—Ç–∞—Ç—É—Å
        
        # 70-199: –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã
        while len(holding_registers) < 200:
            holding_registers.append(random.randint(0, 1000))
        
        # === INPUT REGISTERS (200 —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤) ===
        input_registers = [random.randint(0, 1000) for _ in range(200)]
        
        # === COILS (200 —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤) ===
        coils = [False] * 200
        for i in range(0, 20, 3):
            coils[i] = random.choice([True, False])
        
        # === DISCRETE INPUTS (200 —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤) ===
        discrete_inputs = [False] * 200
        for i in range(0, 20, 4):
            discrete_inputs[i] = random.choice([True, False])
        
        # –°–æ–∑–¥–∞–Ω–∏–µ datastore
        store = ModbusSlaveContext(
            di=ModbusSequentialDataBlock(0, discrete_inputs),
            co=ModbusSequentialDataBlock(0, coils),
            hr=ModbusSequentialDataBlock(0, holding_registers),
            ir=ModbusSequentialDataBlock(0, input_registers)
        )
        
        context = ModbusServerContext(slaves=store, single=True)
        
        print("‚úÖ Enhanced Datastore created:")
        print(f"   ‚Ä¢ Holding: {len(holding_registers)} registers")
        print(f"   ‚Ä¢ Input: {len(input_registers)} registers")
        print(f"   ‚Ä¢ Coils: {len(coils)} registers")
        print(f"   ‚Ä¢ Discrete: {len(discrete_inputs)} registers")
        
        return context
    
    def create_identity(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ device identity"""
        identity = ModbusDeviceIdentification()
        identity.VendorName = "CAREL"
        identity.ProductCode = "C.pCO"
        identity.VendorUrl = "http://www.carel.com"
        identity.ProductName = "CAREL pCO Enhanced Emulator"
        identity.ModelName = "C.pCO"
        identity.MajorMinorRevision = "Webkit 6.0a"
        
        print("‚úÖ Device Identity created")
        return identity

def start_emulator():
    """–ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞"""
    port = int(os.environ.get('PORT', 5020))
    host = '0.0.0.0'
    
    print("="*70)
    print("üè≠ MODBUS ENHANCED EMULATOR - ProMonitor.kz")
    print("="*70)
    
    emulator = EnhancedCarelPcoEmulator()
    context = emulator.create_datastore()
    identity = emulator.create_identity()
    
    print(f"\nüöÄ Starting Modbus TCP server on {host}:{port}")
    print(f"üì° Connection: modbus://{host}:{port}")
    print(f"üéØ 200+ registers per type")
    print(f"üîÑ Dynamic realistic data")
    print("="*70 + "\n")
    
    StartTcpServer(
        context,
        identity=identity,
        address=(host, port),
        allow_reuse_address=True
    )

if __name__ == "__main__":
    start_emulator()
