"""
API Views –¥–ª—è Real-Time –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤
"""
from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.contrib.auth.decorators import login_required
from django.utils import timezone
from datetime import timedelta
from django.db.models import Count, Q
from django.db.models.functions import TruncHour, TruncMinute

from .models import Actuator, ActuatorCommand


@login_required
@require_http_methods(["GET"])
def actuators_live_stats(request):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç live —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è dashboard
    """
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    total = Actuator.objects.count()
    online = Actuator.objects.filter(is_online=True).count()
    active = Actuator.objects.filter(is_active=True).count()
    
    # –ö–æ–º–∞–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    now = timezone.now()
    last_24h = now - timedelta(hours=24)
    commands_24h = ActuatorCommand.objects.filter(
        timestamp__gte=last_24h
    ).count()
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–æ–º–∞–Ω–¥
    recent_commands = ActuatorCommand.objects.select_related(
        'actuator', 'actuator__sys', 'actuator__sys__obj'
    ).order_by('-timestamp')[:5]
    
    recent_commands_data = []
    for cmd in recent_commands:
        recent_commands_data.append({
            'id': cmd.id,
            'actuator_name': cmd.actuator.name,
            'object_name': cmd.actuator.sys.obj.obj,
            'value': float(cmd.value),
            'timestamp': cmd.timestamp.isoformat(),
            'success': cmd.success,
        })
    
    return JsonResponse({
        'stats': {
            'total': total,
            'online': online,
            'active': active,
            'commands_24h': commands_24h,
        },
        'recent_commands': recent_commands_data,
        'timestamp': now.isoformat(),
    })


@login_required
@require_http_methods(["GET"])
def actuators_commands_timeline(request):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç timeline –∫–æ–º–∞–Ω–¥ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ —á–∞—Å–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    """
    now = timezone.now()
    last_24h = now - timedelta(hours=24)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ —á–∞—Å–∞–º
    commands_by_hour = ActuatorCommand.objects.filter(
        timestamp__gte=last_24h
    ).annotate(
        hour=TruncHour('timestamp')
    ).values('hour').annotate(
        count=Count('id')
    ).order_by('hour')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    labels = []
    data = []
    
    for item in commands_by_hour:
        labels.append(item['hour'].strftime('%H:%M'))
        data.append(item['count'])
    
    return JsonResponse({
        'labels': labels,
        'data': data,
        'timestamp': now.isoformat(),
    })


@login_required
@require_http_methods(["GET"])
def actuators_activity_chart(request):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ 5-–º–∏–Ω—É—Ç–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º
    """
    now = timezone.now()
    last_hour = now - timedelta(hours=1)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ 5-–º–∏–Ω—É—Ç–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º
    # Django –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç TruncMinute –Ω–∞–ø—Ä—è–º—É—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º raw SQL
    from django.db import connection
    
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT 
                DATE_TRUNC('minute', timestamp) - 
                (EXTRACT(MINUTE FROM timestamp)::int % 5) * interval '1 minute' as interval_start,
                COUNT(*) as count
            FROM data_actuatorcommand
            WHERE timestamp >= %s
            GROUP BY interval_start
            ORDER BY interval_start
        """, [last_hour])
        
        rows = cursor.fetchall()
    
    labels = []
    data = []
    
    for row in rows:
        interval_start, count = row
        labels.append(interval_start.strftime('%H:%M'))
        data.append(count)
    
    return JsonResponse({
        'labels': labels,
        'data': data,
        'timestamp': now.isoformat(),
    })


@login_required
@require_http_methods(["GET"])
def actuators_by_type(request):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —Ç–∏–ø–∞–º –¥–ª—è pie chart
    """
    devices_by_type = Actuator.objects.values(
        'actuator_type'
    ).annotate(
        count=Count('id')
    ).order_by('-count')
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –Ω–∞ –∏–∫–æ–Ω–∫–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
    type_labels = {
        'valve': 'üö∞ –ö–ª–∞–ø–∞–Ω—ã',
        'relay': '‚ö° –†–µ–ª–µ',
        'motor': '‚öôÔ∏è –ú–æ—Ç–æ—Ä—ã',
        'switch': 'üí° –í—ã–∫–ª—é—á–∞—Ç–µ–ª–∏',
        'dimmer': 'üîÜ –î–∏–º–º–µ—Ä—ã',
        'pump': 'üíß –ù–∞—Å–æ—Å—ã',
        'fan': 'üåÄ –í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã',
        'heater': 'üî• –ù–∞–≥—Ä–µ–≤–∞—Ç–µ–ª–∏',
        'cooler': '‚ùÑÔ∏è –û—Ö–ª–∞–¥–∏—Ç–µ–ª–∏',
    }
    
    labels = []
    data = []
    
    for item in devices_by_type:
        device_type = item['actuator_type']
        label = type_labels.get(device_type, device_type)
        labels.append(label)
        data.append(item['count'])
    
    return JsonResponse({
        'labels': labels,
        'data': data,
        'timestamp': timezone.now().isoformat(),
    })
