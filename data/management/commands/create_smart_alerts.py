"""
–£–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–≤–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (Phase 4.3)
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤ –∏ —Å–æ–∑–¥–∞—ë—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏
"""
from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta
from django.db.models import Avg, Max, Min, Count
import random
from data.models import (
    Company, AlertRule, AlertEvent, AlertComment, 
    Atributes, User_profile, Data, Obj, System
)


class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞—Ç—å —É–º–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'

    def add_arguments(self, parser):
        parser.add_argument(
            '--events',
            type=int,
            default=20,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π —Ç—Ä–µ–≤–æ–≥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20)'
        )

    def handle(self, *args, **options):
        events_count = options['events']
        
        self.stdout.write(self.style.SUCCESS('üö® –£–ú–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–†–ï–í–û–ì'))
        self.stdout.write('=' * 60)
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é
            company = Company.objects.first()
            if not company:
                self.stdout.write(self.style.ERROR('‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'))
                return
            
            self.stdout.write(f'\n‚úÖ –ö–æ–º–ø–∞–Ω–∏—è: {company.name}')
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã, —Å–∏—Å—Ç–µ–º—ã, –¥–∞—Ç—á–∏–∫–∏
            objects = Obj.objects.filter(company=company)
            systems = System.objects.filter(obj__company=company)
            sensors = Atributes.objects.filter(sys__obj__company=company)
            
            self.stdout.write(f'üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞:')
            self.stdout.write(f'   ‚Ä¢ –û–±—ä–µ–∫—Ç—ã: {objects.count()}')
            self.stdout.write(f'   ‚Ä¢ –°–∏—Å—Ç–µ–º—ã: {systems.count()}')
            self.stdout.write(f'   ‚Ä¢ –î–∞—Ç—á–∏–∫–∏: {sensors.count()}')
            
            if not sensors.exists():
                self.stdout.write(self.style.ERROR('‚ùå –î–∞—Ç—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'))
                return
            
            # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.stdout.write(f'\nüîç –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•...')
            
            sensors_with_data = []
            for sensor in sensors[:30]:  # –¢–æ–ø-30 –¥–∞—Ç—á–∏–∫–æ–≤
                recent_data = Data.objects.filter(
                    atribute=sensor,
                    timestamp__gte=timezone.now() - timedelta(days=7)
                )
                
                if recent_data.exists():
                    stats = recent_data.aggregate(
                        count=Count('id'),
                        avg=Avg('value'),
                        max_val=Max('value'),
                        min_val=Min('value')
                    )
                    
                    sensors_with_data.append({
                        'sensor': sensor,
                        'stats': stats,
                        'system': sensor.sys,
                        'object': sensor.sys.obj if sensor.sys else None
                    })
            
            self.stdout.write(f'‚úÖ –î–∞—Ç—á–∏–∫–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏: {len(sensors_with_data)}')
            
            # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø-5 –¥–∞—Ç—á–∏–∫–æ–≤
            self.stdout.write(f'\nüìà –¢–æ–ø-5 –¥–∞—Ç—á–∏–∫–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏:')
            for i, item in enumerate(sensors_with_data[:5], 1):
                sensor = item['sensor']
                stats = item['stats']
                obj_name = item['object'].obj if item['object'] else 'N/A'
                sys_name = item['system'].name if item['system'] else 'N/A'
                
                self.stdout.write(
                    f'   {i}. {sensor.name} @ {sys_name} ({obj_name})\n'
                    f'      –î–∞–Ω–Ω—ã—Ö: {stats["count"]}, '
                    f'Avg: {stats["avg"]:.1f}, '
                    f'Min: {stats["min_val"]:.1f}, '
                    f'Max: {stats["max_val"]:.1f} {sensor.uom}'
                )
            
            # 4. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = list(User_profile.objects.filter(company=company))
            if not users:
                self.stdout.write(self.style.WARNING('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'))
                return
            
            self.stdout.write(f'\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}')
            
            # 5. –°–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª–∞ —Ç—Ä–µ–≤–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.stdout.write(f'\nüìã –°–û–ó–î–ê–ù–ò–ï –ü–†–ê–í–ò–õ –¢–†–ï–í–û–ì...')
            
            rules_created = 0
            created_rules = []
            
            for item in sensors_with_data[:10]:  # –°–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–æ–ø-10 –¥–∞—Ç—á–∏–∫–æ–≤
                sensor = item['sensor']
                stats = item['stats']
                
                # –£–º–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                avg_val = stats['avg']
                max_val = stats['max_val']
                min_val = stats['min_val']
                
                # –í—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ 20% –æ—Ç max)
                high_threshold = max_val * 1.2
                rule_high, created = AlertRule.objects.get_or_create(
                    company=company,
                    attribute=sensor,
                    name=f'–í—ã—Å–æ–∫–æ–µ {sensor.name}',
                    defaults={
                        'description': f'{sensor.name} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –Ω–æ—Ä–º—É',
                        'condition': '>',
                        'threshold': high_threshold,
                        'severity': 'high',
                        'is_active': True,
                        'notification_channels': ['email', 'telegram']
                    }
                )
                
                if created:
                    created_rules.append(rule_high)
                    rules_created += 1
                    self.stdout.write(f'   ‚úÖ {rule_high.name} (–ø–æ—Ä–æ–≥ > {high_threshold:.1f})')
                
                # –ù–∏–∑–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∏–∂–µ –Ω–∞ 20% –æ—Ç min)
                low_threshold = min_val * 0.8
                rule_low, created = AlertRule.objects.get_or_create(
                    company=company,
                    attribute=sensor,
                    name=f'–ù–∏–∑–∫–æ–µ {sensor.name}',
                    defaults={
                        'description': f'{sensor.name} –Ω–∏–∂–µ –Ω–æ—Ä–º—ã',
                        'condition': '<',
                        'threshold': low_threshold,
                        'severity': 'medium',
                        'is_active': True,
                        'notification_channels': ['email']
                    }
                )
                
                if created:
                    created_rules.append(rule_low)
                    rules_created += 1
            
            self.stdout.write(self.style.SUCCESS(f'\n‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∞–≤–∏–ª: {rules_created}'))
            
            # 6. –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏—è —Ç—Ä–µ–≤–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.stdout.write(f'\nüö® –°–û–ó–î–ê–ù–ò–ï –°–û–ë–´–¢–ò–ô –¢–†–ï–í–û–ì...')
            
            events_created = 0
            statuses = ['active', 'acknowledged', 'resolved', 'snoozed']
            now = timezone.now()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞
            all_rules = list(AlertRule.objects.filter(company=company))
            if not all_rules:
                all_rules = created_rules
            
            for i in range(events_count):
                rule = random.choice(all_rules)
                sensor = rule.attribute
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—Ä—É—à–∞–µ—Ç –ø–æ—Ä–æ–≥
                recent_data = Data.objects.filter(
                    atribute=sensor,
                    timestamp__gte=now - timedelta(days=7)
                ).order_by('?')[:10]  # –°–ª—É—á–∞–π–Ω—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
                
                triggered_value = None
                triggered_time = None
                
                for data_point in recent_data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ä—É—à–∞–µ—Ç –ª–∏ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥
                    if rule.check_condition(data_point.value):
                        triggered_value = data_point.value
                        triggered_time = data_point.timestamp
                        break
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
                if triggered_value is None:
                    if rule.condition == '>':
                        triggered_value = rule.threshold + random.uniform(1, 20)
                    elif rule.condition == '<':
                        triggered_value = rule.threshold - random.uniform(1, 20)
                    else:
                        triggered_value = rule.threshold + random.uniform(-10, 10)
                    
                    triggered_time = now - timedelta(hours=random.randint(1, 168))
                
                # –°—Ç–∞—Ç—É—Å —Ç—Ä–µ–≤–æ–≥–∏
                status = random.choice(statuses)
                
                # –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ
                event = AlertEvent.objects.create(
                    rule=rule,
                    triggered_at=triggered_time,
                    value=triggered_value,
                    status=status,
                )
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if status in ['acknowledged', 'resolved']:
                    event.acknowledged_by = random.choice(users)
                    event.acknowledged_at = triggered_time + timedelta(minutes=random.randint(5, 30))
                    event.save()
                
                if status == 'resolved':
                    event.resolved_by = random.choice(users)
                    event.resolved_at = event.acknowledged_at + timedelta(minutes=random.randint(10, 120))
                    event.save()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–µ—à—ë–Ω–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–µ
                    AlertComment.objects.create(
                        event=event,
                        user=event.resolved_by,
                        text=random.choice([
                            '–ü—Ä–æ–±–ª–µ–º–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞',
                            '–°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
                            '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –≤ –Ω–æ—Ä–º—É',
                            '–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
                        ])
                    )
                
                if status == 'snoozed':
                    event.snoozed_by = random.choice(users)
                    event.snooze_until = now + timedelta(hours=random.randint(1, 24))
                    event.save()
                
                events_created += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º —Ç—Ä–µ–≤–æ–≥–∞–º
                if random.random() > 0.7:  # 30% —à–∞–Ω—Å
                    comments_count = random.randint(1, 2)
                    for _ in range(comments_count):
                        comment_texts = [
                            '–ü—Ä–æ–≤–µ—Ä—è—é —Å–∏—Ç—É–∞—Ü–∏—é',
                            '–í—ã–µ–∑–∂–∞—é –Ω–∞ –æ–±—ä–µ–∫—Ç',
                            '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
                            '–°–≤—è–∑–∞–ª—Å—è —Å —Ç–µ—Ö–Ω–∏–∫–æ–º',
                            '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª —Å–∏—Å—Ç–µ–º—É',
                            '–ù–∞—Å—Ç—Ä–æ–∏–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
                        ]
                        
                        AlertComment.objects.create(
                            event=event,
                            user=random.choice(users),
                            text=random.choice(comment_texts),
                        )
            
            self.stdout.write(self.style.SUCCESS(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {events_created}'))
            
            # 7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.stdout.write(f'\n' + '=' * 60)
            self.stdout.write(self.style.SUCCESS('üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:'))
            self.stdout.write('=' * 60)
            
            self.stdout.write(f'\nüîî –ü—Ä–∞–≤–∏–ª–∞ —Ç—Ä–µ–≤–æ–≥:')
            self.stdout.write(f'   üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {AlertEvent.objects.filter(rule__severity="critical").count()}')
            self.stdout.write(f'   üü† –í—ã—Å–æ–∫–∏—Ö: {AlertEvent.objects.filter(rule__severity="high").count()}')
            self.stdout.write(f'   üü° –°—Ä–µ–¥–Ω–∏—Ö: {AlertEvent.objects.filter(rule__severity="medium").count()}')
            self.stdout.write(f'   üîµ –ù–∏–∑–∫–∏—Ö: {AlertEvent.objects.filter(rule__severity="low").count()}')
            
            self.stdout.write(f'\n‚ö° –°–æ–±—ã—Ç–∏—è —Ç—Ä–µ–≤–æ–≥:')
            self.stdout.write(f'   üö® –ê–∫—Ç–∏–≤–Ω—ã—Ö: {AlertEvent.objects.filter(status="active").count()}')
            self.stdout.write(f'   ‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö: {AlertEvent.objects.filter(status="acknowledged").count()}')
            self.stdout.write(f'   ‚úÖ –†–µ—à—ë–Ω–Ω—ã—Ö: {AlertEvent.objects.filter(status="resolved").count()}')
            self.stdout.write(f'   ‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö: {AlertEvent.objects.filter(status="snoozed").count()}')
            self.stdout.write(f'   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {AlertComment.objects.count()}')
            
            self.stdout.write(f'\n' + '=' * 60)
            self.stdout.write(self.style.SUCCESS('‚úÖ –£–°–ü–ï–®–ù–û! –£–º–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏ —Å–æ–∑–¥–∞–Ω—ã!'))
            self.stdout.write('=' * 60)
            self.stdout.write(f'\nüåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: https://www.promonitor.kz/alerts/')
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}'))
            import traceback
            traceback.print_exc()
