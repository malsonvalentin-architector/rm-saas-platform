"""
Management command –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• demo –¥–∞–Ω–Ω—ã—Ö
–°–æ–∑–¥–∞—ë—Ç 10 –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:
- –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –∏–º–µ–µ—Ç 3-5 —Å–∏—Å—Ç–µ–º
- –ö–∞–∂–¥–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–º–µ–µ—Ç 5-8 –¥–∞—Ç—á–∏–∫–æ–≤
- –í—Å–µ –¥–∞—Ç—á–∏–∫–∏ –∏–º–µ—é—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 24 —á–∞—Å–∞
- –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã alert rules –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""
from django.core.management.base import BaseCommand
from django.utils import timezone
from django.contrib.auth import get_user_model
from datetime import timedelta
import random

from data.models import Company, Obj, System, Atributes, Data, AlertRule

User = get_user_model()


class Command(BaseCommand):
    help = 'Load high-quality demo data: 10 objects with systems, sensors, data, alerts'

    def add_arguments(self, parser):
        parser.add_argument(
            '--user',
            type=str,
            default='admin@promonitor.kz',
            help='User email to assign objects'
        )
        parser.add_argument(
            '--reset',
            action='store_true',
            help='Delete all existing objects first'
        )

    def handle(self, *args, **options):
        user_email = options['user']
        reset = options['reset']

        self.stdout.write('=' * 80)
        self.stdout.write(self.style.SUCCESS('üè≠ ProMonitor Quality Demo Data Generator'))
        self.stdout.write('=' * 80)
        self.stdout.write('')

        # Get user and company
        try:
            user = User.objects.get(email=user_email)
            company = user.company
            self.stdout.write(f'‚úÖ User: {user.email}')
            self.stdout.write(f'‚úÖ Company: {company.name}')
        except User.DoesNotExist:
            self.stdout.write(self.style.ERROR(f'‚ùå User not found: {user_email}'))
            return

        # Reset if requested
        if reset:
            self.stdout.write('')
            self.stdout.write('‚ö†Ô∏è  Resetting existing data...')
            Obj.objects.filter(company=company).delete()
            self.stdout.write(self.style.SUCCESS('‚úÖ Old data deleted'))

        self.stdout.write('')
        self.stdout.write('üìä Creating demo data...')
        self.stdout.write('')

        # Define 10 realistic objects
        objects_data = [
            {
                'name': '–î–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä –ê–ª–º–∞—Ç—ã - –ì–ª–∞–≤–Ω—ã–π',
                'address': '—É–ª. –î–æ—Å—Ç—ã–∫, 240, –ê–ª–º–∞—Ç—ã',
                'description': '–û—Å–Ω–æ–≤–Ω–æ–π –¥–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏ —Å—Ç–æ–π–∫–∞–º–∏ –∏ —Å–∏—Å—Ç–µ–º–æ–π –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è',
                'systems': [
                    {'name': '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ 1', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU', '–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞', '–ú–æ—â–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ö–ª–∞–∂–¥–∞—é—â–µ–π –∂–∏–¥–∫–æ—Å—Ç–∏']},
                    {'name': '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ 2', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU', '–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞', '–ú–æ—â–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤', '–î–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ']},
                    {'name': '–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –≤—ã—Ö–æ–¥–µ', '–ú–æ—â–Ω–æ—Å—Ç—å –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞', '–£—Ä–æ–≤–µ–Ω—å —Ñ—Ä–µ–æ–Ω–∞', '–î–∞–≤–ª–µ–Ω–∏–µ']},
                    {'name': '–ò–ë–ü (–ò—Å—Ç–æ—á–Ω–∏–∫ –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è)', 'sensors': ['–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ —Å–µ—Ç–∏', '–¢–æ–∫ –Ω–∞–≥—Ä—É–∑–∫–∏', '–ó–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏ %', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±–∞—Ç–∞—Ä–µ–π']},
                    {'name': '–°–∏—Å—Ç–µ–º–∞ –ø–æ–∂–∞—Ä–æ—Ç—É—à–µ–Ω–∏—è', 'sensors': ['–î–∞—Ç—á–∏–∫ –¥—ã–º–∞', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏', '–î–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ', '–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–ø–∞–Ω–æ–≤']},
                ]
            },
            {
                'name': '–û—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ –Ω–∞ –ê–±–∞—è',
                'address': '–ø—Ä. –ê–±–∞—è, 143, –ê–ª–º–∞—Ç—ã',
                'description': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –∑–¥–∞–Ω–∏–µ —Å –æ—Ñ–∏—Å–Ω—ã–º–∏ –ø–æ–º–µ—â–µ–Ω–∏—è–º–∏',
                'systems': [
                    {'name': 'HVAC 1-–π —ç—Ç–∞–∂', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', '–†–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞', '–î–∞–≤–ª–µ–Ω–∏–µ']},
                    {'name': 'HVAC 2-–π —ç—Ç–∞–∂', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', '–†–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞', '–î–∞–≤–ª–µ–Ω–∏–µ']},
                    {'name': '–≠–ª–µ–∫—Ç—Ä–æ—â–∏—Ç–æ–≤–∞—è', 'sensors': ['–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ L1', '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ L2', '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ L3', '–û–±—â–∞—è –º–æ—â–Ω–æ—Å—Ç—å', '–¢–æ–∫ L1', '–¢–æ–∫ L2', '–¢–æ–∫ L3']},
                    {'name': '–°–∏—Å—Ç–µ–º–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è', 'sensors': ['–ú–æ—â–Ω–æ—Å—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏—è', '–û—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å', '–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è']},
                ]
            },
            {
                'name': '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–µ—Ö ‚Ññ1',
                'address': '—É–ª. –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è, 15, –ê–ª–º–∞—Ç—ã',
                'description': '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º',
                'systems': [
                    {'name': '–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è', 'sensors': ['–î–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥–Ω–µ—Ç–∞–Ω–∏—è', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞', '–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è', '–í–∏–±—Ä–∞—Ü–∏—è', '–£—Ä–æ–≤–µ–Ω—å –º–∞—Å–ª–∞']},
                    {'name': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ª–∏–Ω–∏—è –ê', 'sensors': ['–°–∫–æ—Ä–æ—Å—Ç—å –∫–æ–Ω–≤–µ–π–µ—Ä–∞', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞', '–î–∞–≤–ª–µ–Ω–∏–µ –≥–∏–¥—Ä–æ—Å–∏—Å—Ç–µ–º—ã', '–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ']},
                    {'name': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ª–∏–Ω–∏—è –ë', 'sensors': ['–°–∫–æ—Ä–æ—Å—Ç—å –∫–æ–Ω–≤–µ–π–µ—Ä–∞', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞', '–î–∞–≤–ª–µ–Ω–∏–µ –≥–∏–¥—Ä–æ—Å–∏—Å—Ç–µ–º—ã', '–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ']},
                    {'name': '–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è —Ü–µ—Ö–∞', 'sensors': ['–†–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–∏—Ç–æ—á–Ω–æ–≥–æ –≤–æ–∑–¥—É—Ö–∞', '–ú–æ—â–Ω–æ—Å—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤', '–§–∏–ª—å—Ç—Ä—ã - –ø–µ—Ä–µ–ø–∞–¥ –¥–∞–≤–ª–µ–Ω–∏—è']},
                ]
            },
            {
                'name': '–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä Mega',
                'address': '—É–ª. –†–æ–∑—ã–±–∞–∫–∏–µ–≤–∞, 247, –ê–ª–º–∞—Ç—ã',
                'description': '–ö—Ä—É–ø–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –∫–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—è',
                'systems': [
                    {'name': '–ß–∏–ª–ª–µ—Ä 1', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–¥–∞—á–∏', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–±—Ä–∞—Ç–∫–∏', '–ú–æ—â–Ω–æ—Å—Ç—å —á–∏–ª–ª–µ—Ä–∞', '–î–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–µ–æ–Ω–∞', '–†–∞—Å—Ö–æ–¥ –≤–æ–¥—ã']},
                    {'name': '–ß–∏–ª–ª–µ—Ä 2', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–¥–∞—á–∏', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–±—Ä–∞—Ç–∫–∏', '–ú–æ—â–Ω–æ—Å—Ç—å —á–∏–ª–ª–µ—Ä–∞', '–î–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–µ–æ–Ω–∞', '–†–∞—Å—Ö–æ–¥ –≤–æ–¥—ã']},
                    {'name': '–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∑–∞–ª–∞', 'sensors': ['CO2 –≤ –∑–∞–ª–µ', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', '–†–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞']},
                    {'name': '–•–æ–ª–æ–¥–∏–ª—å–Ω—ã–µ –≤–∏—Ç—Ä–∏–Ω—ã', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–∏—Ç—Ä–∏–Ω—ã 1', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–∏—Ç—Ä–∏–Ω—ã 2', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–∏—Ç—Ä–∏–Ω—ã 3', '–û–±—â–∞—è –º–æ—â–Ω–æ—Å—Ç—å']},
                ]
            },
            {
                'name': '–°–∫–ª–∞–¥—Å–∫–æ–π –∫–æ–º–ø–ª–µ–∫—Å –Ω–∞ –ñ–∞–Ω–¥–æ—Å–æ–≤–∞',
                'address': '—É–ª. –ñ–∞–Ω–¥–æ—Å–æ–≤–∞, 98, –ê–ª–º–∞—Ç—ã',
                'description': '–°–∫–ª–∞–¥—Å–∫–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è —Å —Ö–æ–ª–æ–¥–∏–ª—å–Ω—ã–º–∏ –∫–∞–º–µ—Ä–∞–º–∏',
                'systems': [
                    {'name': '–•–æ–ª–æ–¥–∏–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞ ‚Ññ1', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏—Å–ø–∞—Ä–∏—Ç–µ–ª—è', '–î–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–µ–æ–Ω–∞']},
                    {'name': '–•–æ–ª–æ–¥–∏–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞ ‚Ññ2', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏—Å–ø–∞—Ä–∏—Ç–µ–ª—è', '–î–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–µ–æ–Ω–∞']},
                    {'name': '–ü–æ–≥—Ä—É–∑–æ—á–Ω–∞—è –∑–æ–Ω–∞', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–û—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å', '–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ']},
                ]
            },
            {
                'name': '–ë–æ–ª—å–Ω–∏—á–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å',
                'address': '—É–ª. –ë–∞–π–∑–∞–∫–æ–≤–∞, 280, –ê–ª–º–∞—Ç—ã',
                'description': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –∫—Ä–∏—Ç–∏—á–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏',
                'systems': [
                    {'name': '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', '–î–∞–≤–ª–µ–Ω–∏–µ', '–ß–∏—Å—Ç–æ—Ç–∞ –≤–æ–∑–¥—É—Ö–∞', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ O2']},
                    {'name': '–†–µ–∞–Ω–∏–º–∞—Ü–∏—è', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', '–î–∞–≤–ª–µ–Ω–∏–µ', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ O2']},
                    {'name': '–î–∏–∑–µ–ª—å-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä', 'sensors': ['–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '–ß–∞—Å—Ç–æ—Ç–∞', '–ú–æ—â–Ω–æ—Å—Ç—å', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–∞—Å–ª–∞', '–£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞']},
                    {'name': '–°–∏—Å—Ç–µ–º–∞ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏', 'sensors': ['–†–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞ –ø–∞–ª–∞—Ç—ã', '–†–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞ –∫–æ—Ä–∏–¥–æ—Ä—ã', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', 'CO2']},
                ]
            },
            {
                'name': '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞ –ö–∞–∑–∂–æ–ª',
                'address': '–ø—Ä. –î–æ—Å—Ç—ã–∫, 52/2, –ê–ª–º–∞—Ç—ã',
                'description': '–ì–æ—Å—Ç–∏–Ω–∏—á–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞',
                'systems': [
                    {'name': '–ö–æ—Ç–µ–ª—å–Ω–∞—è', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ø–ª–æ–Ω–æ—Å–∏—Ç–µ–ª—è', '–î–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ', '–ú–æ—â–Ω–æ—Å—Ç—å –∫–æ—Ç–ª–∞', '–†–∞—Å—Ö–æ–¥ –≥–∞–∑–∞']},
                    {'name': '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—Ä–µ–¥–Ω–µ–µ', '–í–ª–∞–∂–Ω–æ—Å—Ç—å —Å—Ä–µ–¥–Ω–µ–µ', '–ú–æ—â–Ω–æ—Å—Ç—å VRV —Å–∏—Å—Ç–µ–º']},
                    {'name': '–ë–∞—Å—Å–µ–π–Ω', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã', 'pH –≤–æ–¥—ã', '–£—Ä–æ–≤–µ–Ω—å —Ö–ª–æ—Ä–∞', '–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞']},
                ]
            },
            {
                'name': '–ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä –ù—É—Ä–ª—ã –¢–∞—É',
                'address': '–ø—Ä. –ö–∞–±–∞–Ω–±–∞–π –±–∞—Ç—ã—Ä–∞, 43, –ù—É—Ä-–°—É–ª—Ç–∞–Ω',
                'description': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä –∫–ª–∞—Å—Å–∞ –ê',
                'systems': [
                    {'name': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–¥–∞—á–∏', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–±—Ä–∞—Ç–∫–∏', '–ú–æ—â–Ω–æ—Å—Ç—å', '–†–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞', '–§–∏–ª—å—Ç—Ä—ã - –∑–∞–≥—Ä—è–∑–Ω—ë–Ω–Ω–æ—Å—Ç—å']},
                    {'name': '–õ–∏—Ñ—Ç–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'sensors': ['–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ', '–í–∏–±—Ä–∞—Ü–∏—è', '–°—á—ë—Ç—á–∏–∫ —Ü–∏–∫–ª–æ–≤', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è']},
                    {'name': '–ü–æ–¥–∑–µ–º–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞', 'sensors': ['CO –≤ –≤–æ–∑–¥—É—Ö–µ', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–û—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å', '–ú–æ—â–Ω–æ—Å—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏']},
                    {'name': '–≠–ª–µ–∫—Ç—Ä–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ', 'sensors': ['–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤–≤–æ–¥ 1', '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤–≤–æ–¥ 2', '–û–±—â–∞—è –º–æ—â–Ω–æ—Å—Ç—å', '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏']},
                ]
            },
            {
                'name': '–ê–ø—Ç–µ—á–Ω—ã–π —Å–∫–ª–∞–¥',
                'address': '—É–ª. –°–∞—Ç–ø–∞–µ–≤–∞, 90/21, –ê–ª–º–∞—Ç—ã',
                'description': '–°–∫–ª–∞–¥ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤ —Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏',
                'systems': [
                    {'name': '–•–æ–ª–æ–¥–∏–ª—å–Ω–∞—è –∫–æ–º–µ—Ä—á–µ—Å–∫–∞—è', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–æ–Ω–∞ 1', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–æ–Ω–∞ 2', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', '–ú–æ—â–Ω–æ—Å—Ç—å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞']},
                    {'name': '–ú–æ—Ä–æ–∑–∏–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', '–î–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–µ–æ–Ω–∞', '–ê–≤–∞—Ä–∏–π–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è']},
                    {'name': '–ö–æ–º–Ω–∞—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', '–û—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å']},
                ]
            },
            {
                'name': '–†–µ—Å—Ç–æ—Ä–∞–Ω –†–∞—Ö–∞—Ç',
                'address': '—É–ª. –§—É—Ä–º–∞–Ω–æ–≤–∞, 273, –ê–ª–º–∞—Ç—ã',
                'description': '–†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å —Å –∫—É—Ö–Ω–µ–π –∏ –∑–∞–ª–æ–º',
                'systems': [
                    {'name': '–ö—É—Ö–æ–Ω–Ω–∞—è –≤—ã—Ç—è–∂–∫–∞', 'sensors': ['–†–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–ñ–∏—Ä –Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ö %', '–ú–æ—â–Ω–æ—Å—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞']},
                    {'name': '–•–æ–ª–æ–¥–∏–ª—å–Ω—ã–µ –∫–∞–º–µ—Ä—ã –∫—É—Ö–Ω–∏', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–∞–º–µ—Ä–∞ 1', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–∞–º–µ—Ä–∞ 2', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', '–û–±—â–∞—è –º–æ—â–Ω–æ—Å—Ç—å']},
                    {'name': '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ª–∞', 'sensors': ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', 'CO2', '–ú–æ—â–Ω–æ—Å—Ç—å']},
                ]
            },
        ]

        total_objects = 0
        total_systems = 0
        total_sensors = 0
        total_data_points = 0
        total_alerts = 0

        for obj_data in objects_data:
            # Create object
            obj = Obj.objects.create(
                name=obj_data['name'],
                address=obj_data['address'],
                company=company
            )
            total_objects += 1
            self.stdout.write(f'  üìç {obj.name}')

            # Create systems and sensors
            for sys_data in obj_data['systems']:
                system = System.objects.create(
                    name=sys_data['name'],
                    obj=obj
                )
                total_systems += 1
                self.stdout.write(f'      üîß {system.name}')

                # Create sensors
                for sensor_name in sys_data['sensors']:
                    # Determine sensor type and unit
                    if '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä' in sensor_name.lower():
                        uom = '¬∞C'
                        min_val, max_val = 18, 28
                        target = 22
                    elif '–≤–ª–∞–∂–Ω' in sensor_name.lower():
                        uom = '%'
                        min_val, max_val = 40, 70
                        target = 50
                    elif '–º–æ—â–Ω' in sensor_name.lower():
                        uom = '–∫–í—Ç'
                        min_val, max_val = 50, 200
                        target = 120
                    elif '–¥–∞–≤–ª–µ–Ω' in sensor_name.lower():
                        uom = '–±–∞—Ä'
                        min_val, max_val = 1.5, 5.0
                        target = 3.0
                    elif '–Ω–∞–ø—Ä—è–∂–µ–Ω' in sensor_name.lower():
                        uom = '–í'
                        min_val, max_val = 220, 230
                        target = 225
                    elif '—Ç–æ–∫' in sensor_name.lower():
                        uom = '–ê'
                        min_val, max_val = 10, 80
                        target = 45
                    elif 'co2' in sensor_name.lower():
                        uom = 'ppm'
                        min_val, max_val = 400, 1200
                        target = 800
                    elif '—Ä–∞—Å—Ö–æ–¥' in sensor_name.lower():
                        uom = '–º¬≥/—á'
                        min_val, max_val = 500, 3000
                        target = 1800
                    else:
                        uom = '–µ–¥'
                        min_val, max_val = 0, 100
                        target = 50

                    sensor = Atributes.objects.create(
                        name=sensor_name,
                        sys=system,
                        uom=uom,
                        write=False
                    )
                    total_sensors += 1

                    # Generate 24 hours of data (every 5 minutes = 288 points)
                    now = timezone.now()
                    for i in range(288):
                        timestamp = now - timedelta(minutes=i * 5)
                        # Generate realistic value with some variation
                        base_value = target + random.uniform(-3, 3)
                        # Add daily cycle
                        hour_factor = (timestamp.hour - 12) / 12  # -1 to 1
                        cycle_value = base_value + hour_factor * (max_val - min_val) * 0.1
                        # Add random noise
                        final_value = cycle_value + random.uniform(-1, 1)
                        # Clamp to range
                        final_value = max(min_val, min(max_val, final_value))

                        Data.objects.create(
                            name=sensor,
                            date=timestamp,
                            value=round(final_value, 2)
                        )
                        total_data_points += 1

                    # Create alert rules for critical sensors
                    if '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä' in sensor_name.lower() or '–º–æ—â–Ω' in sensor_name.lower():
                        # High threshold alert
                        AlertRule.objects.create(
                            company=company,
                            attribute=sensor,
                            name=f'–í—ã—Å–æ–∫–∞—è {sensor_name.lower()}',
                            condition='greater_than',
                            threshold=max_val - 2,
                            severity='warning',
                            enabled=True
                        )
                        # Critical threshold alert
                        AlertRule.objects.create(
                            company=company,
                            attribute=sensor,
                            name=f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è {sensor_name.lower()}',
                            condition='greater_than',
                            threshold=max_val,
                            severity='critical',
                            enabled=True
                        )
                        total_alerts += 2

        self.stdout.write('')
        self.stdout.write('=' * 80)
        self.stdout.write(self.style.SUCCESS('‚úÖ Demo data created successfully!'))
        self.stdout.write('=' * 80)
        self.stdout.write('')
        self.stdout.write(f'üìä Statistics:')
        self.stdout.write(f'   ‚Ä¢ Objects:     {total_objects}')
        self.stdout.write(f'   ‚Ä¢ Systems:     {total_systems}')
        self.stdout.write(f'   ‚Ä¢ Sensors:     {total_sensors}')
        self.stdout.write(f'   ‚Ä¢ Data points: {total_data_points}')
        self.stdout.write(f'   ‚Ä¢ Alert rules: {total_alerts}')
        self.stdout.write('')
        self.stdout.write(f'üåê You can now access:')
        self.stdout.write(f'   ‚Ä¢ Objects list: /objects/')
        self.stdout.write(f'   ‚Ä¢ Each object dashboard with real-time data')
        self.stdout.write(f'   ‚Ä¢ Create new objects with form')
        self.stdout.write('')
