"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–≤–æ–≥ (Phase 4.3)
"""
from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta
import random
from data.models import (
    Company, AlertRule, AlertEvent, AlertComment, 
    Atributes, User_profile
)


class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–≤–æ–≥'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üîî –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–µ–≤–æ–≥...'))
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –∏ –¥–∞—Ç—á–∏–∫–∏
        try:
            company = Company.objects.first()
            if not company:
                self.stdout.write(self.style.ERROR('‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é —Å–Ω–∞—á–∞–ª–∞.'))
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—á–∏–∫–∏ (–∞—Ç—Ä–∏–±—É—Ç—ã)
            sensors = list(Atributes.objects.all()[:20])
            if not sensors:
                self.stdout.write(self.style.ERROR('‚ùå –î–∞—Ç—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç—ã —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —Å–Ω–∞—á–∞–ª–∞.'))
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = list(User_profile.objects.filter(company=company)[:5])
            if not users:
                self.stdout.write(self.style.ERROR('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.'))
                return
            
            self.stdout.write(f'‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(sensors)} –¥–∞—Ç—á–∏–∫–æ–≤, {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
            
            # 1. –°–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª–∞ —Ç—Ä–µ–≤–æ–≥
            self.stdout.write('\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Ç—Ä–µ–≤–æ–≥...')
            rules_created = 0
            
            rule_templates = [
                {
                    'name': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
                    'description': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ 35¬∞C',
                    'condition': '>',
                    'threshold': 35.0,
                    'severity': 'critical',
                },
                {
                    'name': '–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
                    'description': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 30¬∞C',
                    'condition': '>',
                    'threshold': 30.0,
                    'severity': 'high',
                },
                {
                    'name': '–ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
                    'description': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂–µ 15¬∞C',
                    'condition': '<',
                    'threshold': 15.0,
                    'severity': 'medium',
                },
                {
                    'name': '–í—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å',
                    'description': '–í–ª–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç 80%',
                    'condition': '>',
                    'threshold': 80.0,
                    'severity': 'high',
                },
                {
                    'name': '–ù–∏–∑–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å',
                    'description': '–í–ª–∞–∂–Ω–æ—Å—Ç—å –Ω–∏–∂–µ 30%',
                    'condition': '<',
                    'threshold': 30.0,
                    'severity': 'medium',
                },
                {
                    'name': '–í—ã—Å–æ–∫–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ',
                    'description': '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤—ã—à–µ 240V',
                    'condition': '>',
                    'threshold': 240.0,
                    'severity': 'high',
                },
                {
                    'name': '–ù–∏–∑–∫–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ',
                    'description': '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –Ω–∏–∂–µ 200V',
                    'condition': '<',
                    'threshold': 200.0,
                    'severity': 'critical',
                },
                {
                    'name': '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏',
                    'description': '–ú–æ—â–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50 –∫–í—Ç',
                    'condition': '>',
                    'threshold': 50.0,
                    'severity': 'high',
                },
                {
                    'name': '–í—ã—Å–æ–∫–∏–π —Ç–æ–∫',
                    'description': '–¢–æ–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100A',
                    'condition': '>',
                    'threshold': 100.0,
                    'severity': 'medium',
                },
                {
                    'name': '–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—ã–º',
                    'description': '–î–∞—Ç—á–∏–∫ –¥—ã–º–∞ —Å—Ä–∞–±–æ—Ç–∞–ª',
                    'condition': '>',
                    'threshold': 0.5,
                    'severity': 'critical',
                },
            ]
            
            created_rules = []
            for i, template in enumerate(rule_templates):
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–∞—Ç—á–∏–∫
                sensor = random.choice(sensors)
                
                rule, created = AlertRule.objects.get_or_create(
                    company=company,
                    attribute=sensor,
                    name=template['name'],
                    defaults={
                        'description': template['description'],
                        'condition': template['condition'],
                        'threshold': template['threshold'],
                        'severity': template['severity'],
                        'notify_email': True,
                        'notify_telegram': random.choice([True, False]),
                        'enabled': True,
                    }
                )
                
                if created:
                    created_rules.append(rule)
                    rules_created += 1
                    self.stdout.write(f'   ‚úÖ {rule.name} ({rule.get_severity_display()})')
            
            self.stdout.write(self.style.SUCCESS(f'\n‚úÖ –°–æ–∑–¥–∞–Ω–æ {rules_created} –ø—Ä–∞–≤–∏–ª —Ç—Ä–µ–≤–æ–≥'))
            
            # 2. –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏—è —Ç—Ä–µ–≤–æ–≥ (—Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è)
            self.stdout.write('\nüö® –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Ç—Ä–µ–≤–æ–≥...')
            events_created = 0
            
            statuses = ['active', 'acknowledged', 'resolved', 'snoozed']
            now = timezone.now()
            
            for i in range(30):  # –°–æ–∑–¥–∞—ë–º 30 —Å–æ–±—ã—Ç–∏–π
                rule = random.choice(created_rules if created_rules else list(AlertRule.objects.all()[:10]))
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—Ä—É—à–∞–µ—Ç –ø–æ—Ä–æ–≥
                if rule.condition == '>':
                    value = rule.threshold + random.uniform(1, 20)
                elif rule.condition == '<':
                    value = rule.threshold - random.uniform(1, 20)
                else:
                    value = rule.threshold + random.uniform(-10, 10)
                
                # –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                status = random.choice(statuses)
                
                # –í—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (–æ—Ç 1 —á–∞—Å–∞ –¥–æ 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
                triggered_at = now - timedelta(
                    hours=random.randint(1, 168)
                )
                
                event = AlertEvent.objects.create(
                    rule=rule,
                    triggered_at=triggered_at,
                    value=value,
                    status=status,
                )
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                if status in ['acknowledged', 'resolved']:
                    event.acknowledged_by = random.choice(users)
                    event.acknowledged_at = triggered_at + timedelta(minutes=random.randint(5, 30))
                    event.save()
                
                if status == 'resolved':
                    event.resolved_by = random.choice(users)
                    event.resolved_at = event.acknowledged_at + timedelta(minutes=random.randint(10, 120))
                    event.save()
                
                if status == 'snoozed':
                    event.snoozed_by = random.choice(users)
                    event.snooze_until = now + timedelta(hours=random.randint(1, 24))
                    event.save()
                
                events_created += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º —Ç—Ä–µ–≤–æ–≥–∞–º
                if random.random() > 0.6:  # 40% —à–∞–Ω—Å
                    comments_count = random.randint(1, 3)
                    for _ in range(comments_count):
                        comment_texts = [
                            '–ü—Ä–æ–≤–µ—Ä—è—é —Å–∏—Ç—É–∞—Ü–∏—é',
                            '–í—ã–µ–∑–∂–∞—é –Ω–∞ –æ–±—ä–µ–∫—Ç',
                            '–ü—Ä–æ–±–ª–µ–º–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞',
                            '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
                            '–õ–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ',
                            '–°–≤—è–∑–∞–ª—Å—è —Å —Ç–µ—Ö–Ω–∏–∫–æ–º',
                            '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª —Å–∏—Å—Ç–µ–º—É',
                            '–ù–∞—Å—Ç—Ä–æ–∏–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
                        ]
                        
                        AlertComment.objects.create(
                            event=event,
                            user=random.choice(users),
                            text=random.choice(comment_texts),
                        )
            
            self.stdout.write(self.style.SUCCESS(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ {events_created} —Å–æ–±—ã—Ç–∏–π —Ç—Ä–µ–≤–æ–≥'))
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.stdout.write('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
            self.stdout.write(f'   üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {AlertEvent.objects.filter(rule__severity="critical").count()}')
            self.stdout.write(f'   üü† –í—ã—Å–æ–∫–∏—Ö: {AlertEvent.objects.filter(rule__severity="high").count()}')
            self.stdout.write(f'   üü° –°—Ä–µ–¥–Ω–∏—Ö: {AlertEvent.objects.filter(rule__severity="medium").count()}')
            self.stdout.write(f'   üîµ –ù–∏–∑–∫–∏—Ö: {AlertEvent.objects.filter(rule__severity="low").count()}')
            self.stdout.write(f'\n   ‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö: {AlertEvent.objects.filter(status="active").count()}')
            self.stdout.write(f'   ‚úÖ –†–µ—à—ë–Ω–Ω—ã—Ö: {AlertEvent.objects.filter(status="resolved").count()}')
            self.stdout.write(f'   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {AlertComment.objects.count()}')
            
            self.stdout.write(self.style.SUCCESS('\n‚úÖ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!'))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}'))
            import traceback
            traceback.print_exc()
