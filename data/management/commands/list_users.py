"""
Management command –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
from django.core.management.base import BaseCommand
from django.contrib.auth.hashers import check_password
from data.models import User_profile


class Command(BaseCommand):
    help = 'List all users with their details'

    def handle(self, *args, **options):
        self.stdout.write('\n' + '='*70)
        self.stdout.write('                    –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô')
        self.stdout.write('='*70 + '\n')
        
        users = User_profile.objects.all().select_related('company').order_by('role', 'email')
        
        if not users.exists():
            self.stdout.write(self.style.ERROR('‚ùå –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ù–ï–¢ –í –ë–ê–ó–ï!'))
            return
        
        self.stdout.write(f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users.count()}\n')
        
        for i, user in enumerate(users, 1):
            self.stdout.write(f'\n[{i}] {user.email}')
            self.stdout.write(f'    –†–æ–ª—å: {user.role}')
            self.stdout.write(f'    –ö–æ–º–ø–∞–Ω–∏—è: {user.company.name if user.company else "‚ùå –ù–ï–¢"}')
            self.stdout.write(f'    –ê–∫—Ç–∏–≤–µ–Ω: {"‚úÖ" if user.is_active else "‚ùå"} ({user.is_active})')
            self.stdout.write(f'    –ü–µ—Ä—Å–æ–Ω–∞–ª: {"‚úÖ" if user.is_staff else "‚ùå"} ({user.is_staff})')
            self.stdout.write(f'    Superuser: {"‚úÖ" if user.is_superuser else "‚ùå"} ({user.is_superuser})')
            self.stdout.write(f'    –ü–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {"‚úÖ" if user.has_usable_password() else "‚ùå"}')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ä–æ–ª–µ–π
        self.stdout.write('\n' + '='*70)
        self.stdout.write('                 –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–ï–ô')
        self.stdout.write('='*70 + '\n')
        
        test_passwords = [
            ('admin@promonitor.kz', 'ProMonitor2025!'),
            ('admin@promonitor.kz', 'Admin123!'),
            ('superadmin@test.kz', 'Test2025!'),
            ('admin@test.kz', 'Test2025!'),
            ('manager@test.kz', 'Test2025!'),
            ('client@test.kz', 'Test2025!'),
        ]
        
        for email, password in test_passwords:
            try:
                user = User_profile.objects.get(email=email)
                is_correct = check_password(password, user.password)
                
                status = '‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô' if is_correct else '‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô'
                self.stdout.write(f'{status} | {email} / {password}')
                
                if not is_correct:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
                    other_passwords = ['admin', 'Admin123!', 'ProMonitor2025!', 'Test2025!']
                    for other_pwd in other_passwords:
                        if check_password(other_pwd, user.password):
                            self.stdout.write(f'           üí° –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–ê–†–û–õ–¨: {other_pwd}')
                            break
                
            except User_profile.DoesNotExist:
                self.stdout.write(f'‚ö†Ô∏è  –ù–ï –ù–ê–ô–î–ï–ù | {email}')
        
        self.stdout.write('\n' + '='*70 + '\n')
