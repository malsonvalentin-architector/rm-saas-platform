"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ —Ç—Ä–µ–≤–æ–≥
"""
from django.core.management.base import BaseCommand
from django.urls import reverse
from data.models import Company, AlertEvent, Obj, System


class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ —Ç—Ä–µ–≤–æ–≥'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üîó –ü–†–û–í–ï–†–ö–ê –°–°–´–õ–û–ö –í –°–ò–°–¢–ï–ú–ï –¢–†–ï–í–û–ì'))
        self.stdout.write('=' * 70)
        
        try:
            company = Company.objects.first()
            if not company:
                self.stdout.write(self.style.ERROR('‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'))
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Ç—Ä–µ–≤–æ–≥–∏
            alert = AlertEvent.objects.filter(
                rule__attribute__sys__obj__company=company
            ).select_related(
                'rule__attribute__sys__obj'
            ).first()
            
            if not alert:
                self.stdout.write(self.style.WARNING('‚ö†Ô∏è –°–æ–±—ã—Ç–∏—è —Ç—Ä–µ–≤–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'))
                self.stdout.write('   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: python manage.py create_smart_alerts')
                return
            
            sensor = alert.rule.attribute
            system = sensor.sys
            obj = system.obj if system else None
            
            self.stdout.write(f'\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–µ–≤–æ–≥—É:')
            self.stdout.write(f'   ID: {alert.id}')
            self.stdout.write(f'   –ü—Ä–∞–≤–∏–ª–æ: {alert.rule.name}')
            self.stdout.write(f'   –î–∞—Ç—á–∏–∫: {sensor.name}')
            self.stdout.write(f'   –°–∏—Å—Ç–µ–º–∞: {system.name if system else "N/A"}')
            self.stdout.write(f'   –û–±—ä–µ–∫—Ç: {obj.obj if obj else "N/A"}')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ URL
            self.stdout.write(f'\nüîó –ü–†–û–í–ï–†–ö–ê URL:')
            
            urls_to_check = []
            
            # 1. –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç—Ä–µ–≤–æ–≥
            alerts_url = reverse('data:alerts_list')
            urls_to_check.append(('–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç—Ä–µ–≤–æ–≥', alerts_url, 'üö®'))
            
            # 2. –î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–≤–æ–≥–∏
            alert_detail_url = reverse('data:alert_detail', kwargs={'alert_id': alert.id})
            urls_to_check.append(('–î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–≤–æ–≥–∏', alert_detail_url, 'üìã'))
            
            # 3. –ò—Å—Ç–æ—Ä–∏—è –¥–∞—Ç—á–∏–∫–∞
            sensor_history_url = reverse('data:sensor_history', kwargs={'sensor_id': sensor.id})
            urls_to_check.append(('–ò—Å—Ç–æ—Ä–∏—è –¥–∞—Ç—á–∏–∫–∞', sensor_history_url, 'üìä'))
            
            # 4. –û–±—ä–µ–∫—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if obj:
                object_url = reverse('data:object_dashboard', kwargs={'object_id': obj.id})
                urls_to_check.append(('–î–∞—à–±–æ—Ä–¥ –æ–±—ä–µ–∫—Ç–∞', object_url, 'üè¢'))
            
            # 5. –°–ø–∏—Å–æ–∫ —Å–∏—Å—Ç–µ–º –æ–±—ä–µ–∫—Ç–∞
            if obj:
                systems_url = reverse('data:system_list', kwargs={'object_id': obj.id})
                urls_to_check.append(('–°–∏—Å—Ç–µ–º—ã –æ–±—ä–µ–∫—Ç–∞', systems_url, '‚öôÔ∏è'))
            
            # –í—ã–≤–æ–¥–∏–º –≤—Å–µ URL
            for name, url, icon in urls_to_check:
                full_url = f'https://www.promonitor.kz{url}'
                self.stdout.write(f'   {icon} {name}:')
                self.stdout.write(f'      {full_url}')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
            self.stdout.write(f'\nüîÑ –û–ë–†–ê–¢–ù–´–ï –°–°–´–õ–ö–ò:')
            
            # –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–±—ä–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏
            if obj:
                active_alerts_for_obj = AlertEvent.objects.filter(
                    rule__attribute__sys__obj=obj,
                    status='active'
                ).count()
                
                self.stdout.write(f'   üìç –û–±—ä–µ–∫—Ç "{obj.obj}":')
                self.stdout.write(f'      –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥: {active_alerts_for_obj}')
                self.stdout.write(f'      –≠—Ç–∏ —Ç—Ä–µ–≤–æ–≥–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–±—ä–µ–∫—Ç–∞')
            
            # –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç—Ä–µ–≤–æ–≥–∏
            if system:
                active_alerts_for_system = AlertEvent.objects.filter(
                    rule__attribute__sys=system,
                    status='active'
                ).count()
                
                self.stdout.write(f'   ‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞ "{system.name}":')
                self.stdout.write(f'      –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥: {active_alerts_for_system}')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ
            self.stdout.write(f'\nüìä –î–ê–ù–ù–´–ï –í –¢–ê–ë–õ–ò–¶–ï –¢–†–ï–í–û–ì:')
            
            recent_alerts = AlertEvent.objects.filter(
                rule__attribute__sys__obj__company=company
            ).select_related(
                'rule__attribute__sys__obj'
            ).order_by('-triggered_at')[:5]
            
            self.stdout.write(f'\n   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–µ–≤–æ–≥:')
            for i, a in enumerate(recent_alerts, 1):
                sensor_name = a.rule.attribute.name
                sys_name = a.rule.attribute.sys.name if a.rule.attribute.sys else 'N/A'
                obj_name = a.rule.attribute.sys.obj.obj if a.rule.attribute.sys and a.rule.attribute.sys.obj else 'N/A'
                
                self.stdout.write(f'\n   {i}. {a.rule.name} ({a.get_status_display()})')
                self.stdout.write(f'      üìä –î–∞—Ç—á–∏–∫: {sensor_name}')
                self.stdout.write(f'      ‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞: {sys_name}')
                self.stdout.write(f'      üè¢ –û–±—ä–µ–∫—Ç: {obj_name}')
                self.stdout.write(f'      üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞—Ç—á–∏–∫: /sensors/{a.rule.attribute.id}/history/')
                self.stdout.write(f'      üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç: /objects/{a.rule.attribute.sys.obj.id}/')
            
            # –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            self.stdout.write(f'\n' + '=' * 70)
            self.stdout.write(self.style.SUCCESS('‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê'))
            self.stdout.write('=' * 70)
            
            self.stdout.write(f'\nüìù –ß–¢–û –ü–†–û–í–ï–†–ò–¢–¨ –í–†–£–ß–ù–£–Æ:')
            self.stdout.write(f'   1. –û—Ç–∫—Ä–æ–π—Ç–µ: https://www.promonitor.kz/alerts/')
            self.stdout.write(f'   2. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ')
            self.stdout.write(f'   3. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤ —Ç–∞–±–ª–∏—Ü–µ')
            self.stdout.write(f'   4. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –¥–∞—Ç—á–∏–∫ (—Å –∏–∫–æ–Ω–∫–æ–π üìä)')
            self.stdout.write(f'   5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∫–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ –≤–µ–¥—ë—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É')
            
            self.stdout.write(f'\n‚ú® –í–°–ï –°–°–´–õ–ö–ò –î–û–õ–ñ–ù–´ –†–ê–ë–û–¢–ê–¢–¨!')
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}'))
            import traceback
            traceback.print_exc()
