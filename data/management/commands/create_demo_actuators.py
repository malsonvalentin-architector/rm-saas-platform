"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö Phase 4.4

–°–æ–∑–¥–∞—ë—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫—Ç—É–∞—Ç–æ—Ä—ã –∏ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""

from django.core.management.base import BaseCommand
from django.utils import timezone
from data.models import Company, Obj, System, Actuator, ActuatorCommand, User_profile
import random


class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞—ë—Ç –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Phase 4.4: Actuators & Control'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('\n' + '='*70))
        self.stdout.write(self.style.SUCCESS('üì¶ –°–û–ó–î–ê–ù–ò–ï –î–ï–ú–û –î–ê–ù–ù–´–• –î–õ–Ø PHASE 4.4: ACTUATORS & CONTROL'))
        self.stdout.write(self.style.SUCCESS('='*70 + '\n'))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é –∏ –µ—ë –æ–±—ä–µ–∫—Ç—ã
        try:
            company = Company.objects.first()
            if not company:
                self.stdout.write(self.style.ERROR('‚ùå –ö–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'))
                return
            
            self.stdout.write(f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è: {company.name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º—ã
            systems = System.objects.filter(obj__company=company)[:5]
            if not systems:
                self.stdout.write(self.style.ERROR('‚ùå –°–∏—Å—Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'))
                return
            
            self.stdout.write(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–∏—Å—Ç–µ–º: {systems.count()}\n")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–º–∞–Ω–¥
            user = User_profile.objects.filter(company=company).first()
            if not user:
                self.stdout.write(self.style.WARNING('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
            old_count = Actuator.objects.filter(sys__obj__company=company).count()
            if old_count > 0:
                self.stdout.write(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö ({old_count} –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤)...")
                Actuator.objects.filter(sys__obj__company=company).delete()
            
            # –¢–∏–ø—ã –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
            actuator_configs = [
                # –ö–ª–∞–ø–∞–Ω—ã
                {
                    'name': '–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞–ø–∞–Ω –ø–æ–¥–∞—á–∏',
                    'actuator_type': 'valve',
                    'description': '–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–ø–∞–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–º —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã',
                    'min_value': 0,
                    'max_value': 100,
                    'default_value': 50,
                    'uom': '%',
                    'register': 1001,
                },
                {
                    'name': '–ö–ª–∞–ø–∞–Ω –æ–±—Ä–∞—Ç–∫–∏',
                    'actuator_type': 'valve',
                    'description': '–ö–ª–∞–ø–∞–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º',
                    'min_value': 0,
                    'max_value': 100,
                    'default_value': 40,
                    'uom': '%',
                    'register': 1002,
                },
                # –†–µ–ª–µ
                {
                    'name': '–†–µ–ª–µ –ø–∏—Ç–∞–Ω–∏—è –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞',
                    'actuator_type': 'relay',
                    'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞',
                    'min_value': 0,
                    'max_value': 1,
                    'default_value': 0,
                    'uom': '',
                    'register': 2001,
                },
                {
                    'name': '–†–µ–ª–µ –∞–≤–∞—Ä–∏–π–Ω–æ–π —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏',
                    'actuator_type': 'relay',
                    'description': '–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω–æ–π —Å–∏—Ä–µ–Ω—ã',
                    'min_value': 0,
                    'max_value': 1,
                    'default_value': 0,
                    'uom': '',
                    'register': 2002,
                },
                # –ù–∞—Å–æ—Å—ã
                {
                    'name': '–ù–∞—Å–æ—Å —Ü–∏—Ä–∫—É–ª—è—Ü–∏–∏',
                    'actuator_type': 'pump',
                    'description': '–¶–∏—Ä–∫—É–ª—è—Ü–∏–æ–Ω–Ω—ã–π –Ω–∞—Å–æ—Å —Å–∏—Å—Ç–µ–º—ã –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è',
                    'min_value': 0,
                    'max_value': 1,
                    'default_value': 1,
                    'uom': '',
                    'register': 3001,
                },
                # –í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã
                {
                    'name': '–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä–∞',
                    'actuator_type': 'fan',
                    'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞',
                    'min_value': 0,
                    'max_value': 100,
                    'default_value': 60,
                    'uom': '%',
                    'register': 4001,
                },
                {
                    'name': '–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –∏—Å–ø–∞—Ä–∏—Ç–µ–ª—è',
                    'actuator_type': 'fan',
                    'description': '–†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ –∏—Å–ø–∞—Ä–∏—Ç–µ–ª—è',
                    'min_value': 0,
                    'max_value': 100,
                    'default_value': 70,
                    'uom': '%',
                    'register': 4002,
                },
                # –ù–∞–≥—Ä–µ–≤–∞—Ç–µ–ª–∏
                {
                    'name': '–¢–≠–ù –æ—Ç—Ç–∞–π–∫–∏',
                    'actuator_type': 'heater',
                    'description': '–ù–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç—Ç–∞–π–∫–∏ –∏—Å–ø–∞—Ä–∏—Ç–µ–ª—è',
                    'min_value': 0,
                    'max_value': 100,
                    'default_value': 0,
                    'uom': '%',
                    'register': 5001,
                },
                # –ú–æ—Ç–æ—Ä—ã
                {
                    'name': '–ú–æ—Ç–æ—Ä –∑–∞—Å–ª–æ–Ω–∫–∏',
                    'actuator_type': 'motor',
                    'description': '–ü—Ä–∏–≤–æ–¥ –≤–æ–∑–¥—É—à–Ω–æ–π –∑–∞—Å–ª–æ–Ω–∫–∏',
                    'min_value': 0,
                    'max_value': 100,
                    'default_value': 50,
                    'uom': '%',
                    'register': 6001,
                },
                # –í—ã–∫–ª—é—á–∞—Ç–µ–ª–∏
                {
                    'name': '–í—ã–∫–ª—é—á–∞—Ç–µ–ª—å –æ—Å–≤–µ—â–µ–Ω–∏—è',
                    'actuator_type': 'switch',
                    'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ–º –∫–∞–º–µ—Ä—ã',
                    'min_value': 0,
                    'max_value': 1,
                    'default_value': 0,
                    'uom': '',
                    'register': 7001,
                },
            ]
            
            created_actuators = []
            
            # –°–æ–∑–¥–∞—ë–º –∞–∫—Ç—É–∞—Ç–æ—Ä—ã
            self.stdout.write("\nüéÆ –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤:\n")
            for i, config in enumerate(actuator_configs):
                system = systems[i % len(systems)]
                
                actuator = Actuator.objects.create(
                    sys=system,
                    name=config['name'],
                    description=config['description'],
                    actuator_type=config['actuator_type'],
                    modbus_carel=True,
                    register=config['register'],
                    register_type='HD',
                    min_value=config['min_value'],
                    max_value=config['max_value'],
                    default_value=config['default_value'],
                    current_value=config['default_value'],
                    uom=config['uom'],
                    is_active=True,
                    is_online=random.choice([True, True, True, False]),  # 75% –æ–Ω–ª–∞–π–Ω
                )
                
                created_actuators.append(actuator)
                
                status = "üü¢ –û–ù–õ–ê–ô–ù" if actuator.is_online else "üî¥ –û–§–õ–ê–ô–ù"
                self.stdout.write(
                    f"  ‚úÖ {config['actuator_type'].upper():8} | {config['name']:30} | {system.name:20} | {status}"
                )
            
            self.stdout.write(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤: {len(created_actuators)}")
            
            # –°–æ–∑–¥–∞—ë–º –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∏—Å—Ç–æ—Ä–∏—è)
            self.stdout.write("\nüìú –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥:\n")
            commands_count = 0
            
            for actuator in created_actuators:
                # –°–æ–∑–¥–∞—ë–º 5-15 –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç—É–∞—Ç–æ—Ä–∞
                num_commands = random.randint(5, 15)
                
                for _ in range(num_commands):
                    # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º (–æ—Ç 1 —á–∞—Å–∞ –¥–æ 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
                    hours_ago = random.randint(1, 30*24)
                    executed_at = timezone.now() - timezone.timedelta(hours=hours_ago)
                    
                    # –°–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                    if actuator.is_binary():
                        value = random.choice([0, 1])
                    else:
                        value = random.uniform(actuator.min_value, actuator.max_value)
                    
                    # –°—Ç–∞—Ç—É—Å (95% —É—Å–ø–µ—Ö, 5% –æ—à–∏–±–∫–∞)
                    status = random.choices(
                        ['success', 'failed', 'timeout'],
                        weights=[95, 3, 2]
                    )[0]
                    
                    # –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (50-300 –º—Å)
                    response_time = random.randint(50, 300) if status == 'success' else None
                    
                    command = ActuatorCommand.objects.create(
                        actuator=actuator,
                        command_value=value,
                        user=user if user else None,
                        status=status,
                        response_time_ms=response_time,
                        executed_at=executed_at,
                        source_ip=f"192.168.1.{random.randint(1, 254)}",
                        notes=random.choice([
                            '',
                            '–ü–ª–∞–Ω–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞',
                            '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
                            '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫',
                            '–†—É—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞',
                        ])
                    )
                    
                    commands_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã
                last_command = ActuatorCommand.objects.filter(actuator=actuator).order_by('-executed_at').first()
                if last_command:
                    actuator.last_command_at = last_command.executed_at
                    actuator.save()
            
            self.stdout.write(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–æ–º–∞–Ω–¥: {commands_count}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.stdout.write("\n" + "="*70)
            self.stdout.write(self.style.SUCCESS("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"))
            
            total_actuators = Actuator.objects.filter(sys__obj__company=company).count()
            online_actuators = Actuator.objects.filter(sys__obj__company=company, is_online=True).count()
            total_commands = ActuatorCommand.objects.filter(actuator__sys__obj__company=company).count()
            success_commands = ActuatorCommand.objects.filter(
                actuator__sys__obj__company=company, 
                status='success'
            ).count()
            
            self.stdout.write(f"  –í—Å–µ–≥–æ –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤: {total_actuators}")
            self.stdout.write(f"  –í —Å–µ—Ç–∏: {online_actuators}")
            self.stdout.write(f"  –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {total_commands}")
            self.stdout.write(f"  –£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {success_commands}")
            if total_commands > 0:
                self.stdout.write(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_commands/total_commands*100:.1f}%")
            
            self.stdout.write("\n" + "="*70)
            self.stdout.write(self.style.SUCCESS("‚úÖ –î–ï–ú–û –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–´!"))
            self.stdout.write(self.style.SUCCESS("="*70 + "\n"))
            
            self.stdout.write("üåê –û—Ç–∫—Ä–æ–π—Ç–µ: https://www.promonitor.kz/data/actuators/")
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'\n‚ùå –û–®–ò–ë–ö–ê: {str(e)}'))
            import traceback
            self.stdout.write(traceback.format_exc())
