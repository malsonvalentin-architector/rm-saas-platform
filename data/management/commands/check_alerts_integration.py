"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–≤–æ–≥ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta
from django.db.models import Count
from data.models import (
    Company, AlertRule, AlertEvent, Obj, System, 
    Atributes, Data
)


class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–≤–æ–≥'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üîç –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´ –¢–†–ï–í–û–ì'))
        self.stdout.write('=' * 70)
        
        try:
            # 1. –ö–æ–º–ø–∞–Ω–∏—è
            company = Company.objects.first()
            if not company:
                self.stdout.write(self.style.ERROR('‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'))
                return
            
            self.stdout.write(f'\n‚úÖ –ö–æ–º–ø–∞–Ω–∏—è: {company.name} (ID={company.id})')
            
            # 2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            objects = Obj.objects.filter(company=company)
            systems = System.objects.filter(obj__company=company)
            sensors = Atributes.objects.filter(sys__obj__company=company)
            
            self.stdout.write(f'\nüìä –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–•:')
            self.stdout.write(f'   ‚Ä¢ –û–±—ä–µ–∫—Ç—ã: {objects.count()}')
            self.stdout.write(f'   ‚Ä¢ –°–∏—Å—Ç–µ–º—ã: {systems.count()}')
            self.stdout.write(f'   ‚Ä¢ –î–∞—Ç—á–∏–∫–∏: {sensors.count()}')
            
            # 3. –ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤
            now = timezone.now()
            recent_data = Data.objects.filter(
                atribute__sys__obj__company=company,
                timestamp__gte=now - timedelta(hours=24)
            )
            
            self.stdout.write(f'\nüìà –î–ê–ù–ù–´–ï –î–ê–¢–ß–ò–ö–û–í (24—á):')
            self.stdout.write(f'   ‚Ä¢ –ü–æ–∫–∞–∑–∞–Ω–∏–π: {recent_data.count()}')
            
            # –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
            top_sensors = recent_data.values(
                'atribute__name',
                'atribute__sys__name',
                'atribute__sys__obj__obj'
            ).annotate(
                count=Count('id')
            ).order_by('-count')[:5]
            
            self.stdout.write(f'\n   üî• –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤:')
            for i, sensor_data in enumerate(top_sensors, 1):
                self.stdout.write(
                    f'      {i}. {sensor_data["atribute__name"]} '
                    f'@ {sensor_data["atribute__sys__name"]} '
                    f'({sensor_data["atribute__sys__obj__obj"]}): '
                    f'{sensor_data["count"]} –ø–æ–∫–∞–∑–∞–Ω–∏–π'
                )
            
            # 4. –ü—Ä–∞–≤–∏–ª–∞ —Ç—Ä–µ–≤–æ–≥
            rules = AlertRule.objects.filter(company=company)
            active_rules = rules.filter(is_active=True)
            
            self.stdout.write(f'\nüîî –ü–†–ê–í–ò–õ–ê –¢–†–ï–í–û–ì:')
            self.stdout.write(f'   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª: {rules.count()}')
            self.stdout.write(f'   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_rules.count()}')
            
            # –ü–æ —Å–µ—Ä—å—ë–∑–Ω–æ—Å—Ç–∏
            by_severity = rules.values('severity').annotate(count=Count('id'))
            for item in by_severity:
                severity_icons = {
                    'low': 'üîµ',
                    'medium': 'üü°',
                    'high': 'üü†',
                    'critical': 'üî¥'
                }
                icon = severity_icons.get(item['severity'], '‚ö™')
                self.stdout.write(f'   {icon} {item["severity"]}: {item["count"]}')
            
            # –¢–æ–ø-5 –ø—Ä–∞–≤–∏–ª
            if rules.exists():
                self.stdout.write(f'\n   üìã –¢–æ–ø-5 –ø—Ä–∞–≤–∏–ª:')
                for i, rule in enumerate(rules[:5], 1):
                    sensor = rule.attribute
                    sys_name = sensor.sys.name if sensor.sys else 'N/A'
                    obj_name = sensor.sys.obj.obj if sensor.sys and sensor.sys.obj else 'N/A'
                    
                    self.stdout.write(
                        f'      {i}. {rule.name} '
                        f'({rule.get_severity_display()}) '
                        f'‚Üí {sensor.name} @ {sys_name} ({obj_name})'
                    )
            
            # 5. –°–æ–±—ã—Ç–∏—è —Ç—Ä–µ–≤–æ–≥
            events = AlertEvent.objects.filter(
                rule__company=company
            )
            
            self.stdout.write(f'\nüö® –°–û–ë–´–¢–ò–Ø –¢–†–ï–í–û–ì:')
            self.stdout.write(f'   ‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {events.count()}')
            
            # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
            by_status = events.values('status').annotate(count=Count('id'))
            status_icons = {
                'active': 'üî¥',
                'acknowledged': '‚ö†Ô∏è',
                'resolved': '‚úÖ',
                'snoozed': '‚è∞',
                'ignored': 'üö´'
            }
            for item in by_status:
                icon = status_icons.get(item['status'], '‚ö™')
                self.stdout.write(f'   {icon} {item["status"]}: {item["count"]}')
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–±—ã—Ç–∏–π
            if events.exists():
                self.stdout.write(f'\n   üî• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–±—ã—Ç–∏–π:')
                for i, event in enumerate(events.order_by('-triggered_at')[:5], 1):
                    rule = event.rule
                    sensor = rule.attribute
                    sys_name = sensor.sys.name if sensor.sys else 'N/A'
                    obj_name = sensor.sys.obj.obj if sensor.sys and sensor.sys.obj else 'N/A'
                    
                    time_str = event.triggered_at.strftime('%d.%m %H:%M')
                    status_icon = status_icons.get(event.status, '‚ö™')
                    
                    self.stdout.write(
                        f'      {i}. [{time_str}] {status_icon} {rule.name} '
                        f'({event.value} {sensor.uom}) '
                        f'@ {sys_name} ({obj_name})'
                    )
            
            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π
            self.stdout.write(f'\nüîó –ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–ï–ô:')
            
            # –î–∞—Ç—á–∏–∫–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
            sensors_with_rules = Atributes.objects.filter(
                sys__obj__company=company,
                alertrule__isnull=False
            ).distinct().count()
            
            # –ü—Ä–∞–≤–∏–ª–∞ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
            rules_with_events = AlertRule.objects.filter(
                company=company,
                events__isnull=False
            ).distinct().count()
            
            # –°–æ–±—ã—Ç–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
            events_with_comments = AlertEvent.objects.filter(
                rule__company=company,
                comments__isnull=False
            ).distinct().count()
            
            self.stdout.write(f'   ‚Ä¢ –î–∞—Ç—á–∏–∫–æ–≤ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏: {sensors_with_rules} / {sensors.count()}')
            self.stdout.write(f'   ‚Ä¢ –ü—Ä–∞–≤–∏–ª —Å —Å–æ–±—ã—Ç–∏—è–º–∏: {rules_with_events} / {rules.count()}')
            self.stdout.write(f'   ‚Ä¢ –°–æ–±—ã—Ç–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏: {events_with_comments} / {events.count()}')
            
            # 7. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
            self.stdout.write(f'\n' + '=' * 70)
            
            if events.count() == 0:
                self.stdout.write(self.style.WARNING('‚ö†Ô∏è –ù–ï–¢ –°–û–ë–´–¢–ò–ô –¢–†–ï–í–û–ì'))
                self.stdout.write('   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: python manage.py create_smart_alerts')
            elif events.filter(status='active').count() > 0:
                self.stdout.write(self.style.SUCCESS('‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!'))
                self.stdout.write(f'   üö® –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏: {events.filter(status="active").count()}')
            else:
                self.stdout.write(self.style.SUCCESS('‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ù–ê–°–¢–†–û–ï–ù–ê'))
                self.stdout.write('   ‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥ (–≤—Å–µ —Ä–µ—à–µ–Ω—ã)')
            
            self.stdout.write('=' * 70)
            self.stdout.write(f'\nüåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: https://www.promonitor.kz/alerts/')
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}'))
            import traceback
            traceback.print_exc()
